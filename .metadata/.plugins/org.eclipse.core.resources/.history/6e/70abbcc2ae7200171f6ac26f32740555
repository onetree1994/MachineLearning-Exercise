from implement import NeuralNetwork
from sklearn.datasets import load_digits
import pylab as pl
import numpy as np
from sklearn.metrics import confusion_matrix
from sklearn.cross_validation import train_test_split
from sklearn.preprocessing.label import LabelBinarizer
from sklearn.utils.estimator_checks import check_clusterer_compute_labels_predict

# 每张都是64像素的灰度图
digits = load_digits()
print(digits.data.shape)
X = digits.data
y = digits.target
X -= X.min() # 标准化
X /= X.max()

nn = NeuralNetwork([64, 50, 10])
X_train, X_test, y_train, y_test = train_test_split(X, y)
labels_train = LabelBinarizer().fit_transform(y_train)
labels_test = LabelBinarizer().fit_transform(y_test)

print("start fitting......")
nn.fit(X_train, labels_train)
print("fitting over......")

predictions = []
print("\nstart comparing......")
for i in range(X_test.shape[0]):
    o = nn.predict(X_test[i])
    predictions.append(np.argmax(o)) # 整化
print(confusion_matrix(y_test, predicts, predictions))